using NUnit.Framework;

namespace Tests
{
    public class Tests
    {
        [Timeout(2000)]
        [TestCase(
            @"3 34
1
8 13 26
",
            @"13
",
            TestName = "{m}-1")]
        [TestCase(
            @"7 45
2
7 11 16 20 28 34 38
",
            @"12
",
            TestName = "{m}-2")]
        [TestCase(
            @"3 100
1
28 54 81
",
            @"46
",
            TestName = "{m}-3")]
        [TestCase(
            @"3 100
2
28 54 81
",
            @"26
",
            TestName = "{m}-4")]
        [TestCase(
            @"20 1000
4
51 69 102 127 233 295 350 388 417 466 469 523 553 587 720 739 801 855 926 954
",
            @"170
",
            TestName = "{m}-5")]
        public void ATest(string input, string output)
        {
            Utility.InOutTest(Tasks.A.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"2
",
            @"()
",
            TestName = "{m}-1")]
        [TestCase(
            @"3
",
            @"
",
            TestName = "{m}-2")]
        [TestCase(
            @"4
",
            @"(())
()()
",
            TestName = "{m}-3")]
        [TestCase(
            @"10
",
            @"((((()))))
(((()())))
(((())()))
(((()))())
(((())))()
((()(())))
((()()()))
((()())())
((()()))()
((())(()))
((())()())
((())())()
((()))(())
((()))()()
(()((())))
(()(()()))
(()(())())
(()(()))()
(()()(()))
(()()()())
(()()())()
(()())(())
(()())()()
(())((()))
(())(()())
(())(())()
(())()(())
(())()()()
()(((())))
()((()()))
()((())())
()((()))()
()(()(()))
()(()()())
()(()())()
()(())(())
()(())()()
()()((()))
()()(()())
()()(())()
()()()(())
()()()()()
",
            TestName = "{m}-4")]
        public void BTest(string input, string output)
        {
            Utility.InOutTest(Tasks.B.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"3
1 2
2 3
",
            @"3
",
            TestName = "{m}-1")]
        [TestCase(
            @"5
1 2
2 3
3 4
3 5
",
            @"4
",
            TestName = "{m}-2")]
        [TestCase(
            @"10
1 2
1 3
2 4
4 5
4 6
3 7
7 8
8 9
8 10
",
            @"8
",
            TestName = "{m}-3")]
        [TestCase(
            @"31
1 2
1 3
2 4
2 5
3 6
3 7
4 8
4 9
5 10
5 11
6 12
6 13
7 14
7 15
8 16
8 17
9 18
9 19
10 20
10 21
11 22
11 23
12 24
12 25
13 26
13 27
14 28
14 29
15 30
15 31
",
            @"9
",
            TestName = "{m}-4")]
        public void CTest(string input, string output)
        {
            Utility.InOutTest(Tasks.C.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"3 3
1 1 1
1 1 1
1 1 1
",
            @"5 5 5
5 5 5
5 5 5
",
            TestName = "{m}-1")]
        [TestCase(
            @"4 4
3 1 4 1
5 9 2 6
5 3 5 8
9 7 9 3
",
            @"28 28 25 26
39 33 40 34
38 38 36 31
41 41 39 43
",
            TestName = "{m}-2")]
        [TestCase(
            @"2 10
31 41 59 26 53 58 97 93 23 84
62 64 33 83 27 95 2 88 41 97
",
            @"627 629 598 648 592 660 567 653 606 662
623 633 651 618 645 650 689 685 615 676
",
            TestName = "{m}-3")]
        [TestCase(
            @"10 10
83 86 77 65 93 85 86 92 99 71
62 77 90 59 63 76 90 76 72 86
61 68 67 79 82 80 62 73 67 85
79 52 72 58 69 67 93 56 61 92
79 73 71 69 84 87 98 74 65 70
63 76 91 80 56 73 62 70 96 81
55 75 84 77 86 55 96 79 63 57
74 95 82 95 64 67 84 64 93 50
87 58 76 78 88 84 53 51 54 99
82 60 76 68 89 62 76 86 94 89
",
            @"1479 1471 1546 1500 1518 1488 1551 1466 1502 1546
1414 1394 1447 1420 1462 1411 1461 1396 1443 1445
1388 1376 1443 1373 1416 1380 1462 1372 1421 1419
1345 1367 1413 1369 1404 1368 1406 1364 1402 1387
1416 1417 1485 1429 1460 1419 1472 1417 1469 1480
1410 1392 1443 1396 1466 1411 1486 1399 1416 1447
1397 1372 1429 1378 1415 1408 1431 1369 1428 1450
1419 1393 1472 1401 1478 1437 1484 1425 1439 1498
1366 1390 1438 1378 1414 1380 1475 1398 1438 1409
1425 1442 1492 1442 1467 1456 1506 1417 1452 1473
",
            TestName = "{m}-4")]
        public void DTest(string input, string output)
        {
            Utility.InOutTest(Tasks.D.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"7 3
atcoder
",
            @"acd
",
            TestName = "{m}-1")]
        [TestCase(
            @"14 5
kittyonyourlap
",
            @"inlap
",
            TestName = "{m}-2")]
        public void FTest(string input, string output)
        {
            Utility.InOutTest(Tasks.F.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"4
4000 4400 5000 3200
3
3312
2992
4229
",
            @"112
208
171
",
            TestName = "{m}-1")]
        [TestCase(
            @"1
4000
10
3582
3538
3320
3312
3296
3257
3111
3040
3013
2994
",
            @"418
462
680
688
704
743
889
960
987
1006
",
            TestName = "{m}-2")]
        [TestCase(
            @"10
869120000 998244353 777777777 123456789 100100100 464646464 987654321 252525252 869120001 1000000000
10
4229
20210406
1
268435456
3582
536870912
1000000000
869120
99999999
869120001
",
            @"100095871
79889694
100100099
15910204
100096518
72224448
0
99230980
100101
0
",
            TestName = "{m}-3")]
        [TestCase(
            @"100
298750376 229032640 602876667 944779015 909539868 533609371 231368330 445484152 408704870 850216874 349286798 30417810 807260002 554049450 40706045 380488344 749325840 801881841 459457853 66691229 5235900 8100458 46697277 997429858 827651689 790051948 981897272 271364774 536232393 997361572 449659237 602191750 294800444 346669663 792837293 277667068 997282249 468293808 444906878 702693341 894286137 845317003 27053625 926547765 739689211 447395911 902031510 326127348 582956343 842918193 235655766 844300842 438389323 406413067 862896425 464876303 68833418 76340212 911399808 745744264 551223563 854507876 196296968 52144186 431165823 275217640 424495332 847375861 337078801 83054466 648322745 694789156 301518763 319851750 432518459 772897937 630628124 581390864 313132255 350770227 642944345 677742851 448945480 688009163 160941957 290297295 5532462 823543277 19634445 15791361 193309093 66202596 72364149 743270896 297240520 264035189 898589962 59916738 307942952 403411309
30
930579110
22697034
44652533
280533771
753567118
684927419
923477579
557613803
779616458
389130756
323671659
3117850
408004003
224808850
18421958
359047808
364572866
334631363
854759331
647435074
826055423
668443532
620408208
32237184
67299071
251185742
217292659
16181227
850865411
218577687
",
            @"4031345
3062589
2044744
2866703
4241278
3081744
3070186
3564353
6718521
8642412
2455689
2118050
700867
4223790
1212487
8277581
13802639
2447438
251455
887671
1596266
9299319
10219916
1819374
607842
12849447
11739981
389866
648537
10454953
",
            TestName = "{m}-4")]
        public void GTest(string input, string output)
        {
            Utility.InOutTest(Tasks.G.Solve, input, output);
        }

        [Timeout(2000)]
        [TestCase(
            @"10
attcordeer
",
            @"4
",
            TestName = "{m}-1")]
        [TestCase(
            @"41
btwogablwetwoiehocghiewobadegwhoihegnldir
",
            @"2
",
            TestName = "{m}-2")]
        [TestCase(
            @"140
aaaaaaaaaaaaaaaaaaaattttttttttttttttttttccccccccccccccccccccooooooooooooooooooooddddddddddddddddddddeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrr
",
            @"279999993
",
            TestName = "{m}-3")]
        public void HTest(string input, string output)
        {
            Utility.InOutTest(Tasks.H.Solve, input, output);
        }
    }
}
